[doc]
Run system tests using Xvfb

Start a single Xvfb and pekwm session and run all pekwm system tests
in one go.
[enddoc]

[include test.pluxinc]

# test possible ways of setting the configuration file used by pekwm
[function test_config_path]
	[log test_config_path (--config)]
	!$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --config ./pekwm.config.missing --log-level trace
	?using configuration at ./pekwm.config.missing
	?failed to open file ./pekwm.config.missing
	!$_CTRL_C_
	?SH-PROMPT:

	[log test_config_path (env PEKWM_CONFIG_FILE)]
	!env PEKWM_CONFIG_FILE=./pekwm.env.config.missing $$VALGRIND $BIN_DIR/wm/pekwm --skip-start --log-level trace
	?using configuration at ./pekwm.env.config.missing
	?failed to open file ./pekwm.env.config.missing
	!$_CTRL_C_
	?SH-PROMPT:

	[log test_config_path (env -i)]
	# test without home set, supposed to fail
	!env -i $$VALGRIND $BIN_DIR/wm/pekwm --skip-start --log-level trace
	???failed to get configuration file path, none of $HOME and $PEKWM_CONFIG_PATH is set.
	?SH-PROMPT:
[endfunction]

# verify that --log-file outputs to log file when specified on the command
# line
[function test_log_file_output]
       [log test_log_file_output (--log-file)]
       [shell test]
               [call sh-eval "cp /dev/null pekwm.log"]

       [shell pekwm-log]
               !tail -f pekwm.log

       [shell pekwm]
               !$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --log-file pekwm.log --log-level trace

       [shell pekwm-log]
               ???Enter event loop.

       [shell pekwm]
               !$_CTRL_C_
               ?SH-PROMPT:
[endfunction]

[function test_pekwm_replace]
	[log test pekwm --replace]

	[shell pekwm-1]
		-(window manager already running|Invalid read of size)
		[log starting pekwm to be replaced]
		!$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --log-level trace
		?Enter event loop.

	[shell pekwm-2]
		-Invalid read of size
		[log starting pekwm without --replace, should fail]
		!$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --log-level trace
		?window manager already running
		?SH-PROMPT:

		[log starting pekwm with --replace, replace first]
		-Invalid read of size
		!$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --replace --log-level trace
		?waiting for previous window manager to exit
		?Enter event loop.

	[shell pekwm-1]
		?being replaced by another WM
		?SH-PROMPT:

	[shell pekwm-2]
		!$_CTRL_C_
		?SH-PROMPT:
[endfunction]

# verify that $@ and $& resources get expanded
[function test_x11_var_expansion]
	[log test_x11_var_expansion]
	[shell pekwm]
		[log setup Xresources and PEKWM_THEME atom]
		[call sh-eval "xrdb pekwm.xresources"]
		[call sh-eval "xprop -root -f PEKWM_THEME 8s -set PEKWM_THEME atom"]

		-Trying to use undefined variable: (&pekwm.autoproperties|@PEKWM_THEME)
	        !$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --log-level trace \
		!  --config pekwm.config.vars
		[log verify theme from Xresources used]
		?failed to open file atom/theme
	        ?Enter event loop
		-

	[shell pekwm]
	        !$_CTRL_C_
	        ?SH-PROMPT:
[endfunction]

[function test_update_client_list_report_all]
	[log test_update_client_list_report_all]

	[shell test_update_client_list_report_all]
		!$TEST_DIR/test_update_client_list
		?BEGIN WINDOWS
		?END WINDOWS
		?PROGRESS: wait for PropertyNotify

	[shell test_client-1]
		!$TEST_DIR/test_client
		?Window ([0-9]+)
		[global window1=$1]
		[log started test client 1 $window1]

	[shell pekwm]
		?client .* constructed

	[shell test_update_client_list_report_all]
		?BEGIN WINDOWS
		?Window $window1
		?END WINDOWS
		-Window $window1

	[shell test_client-1]
		!
		?SH-PROMPT:
		[log stopped test client 1 $window1]

	[shell test_update_client_list_report_all]
		?BEGIN WINDOWS
		?END WINDOWS
		-

	[shell test_client-1]
		!$TEST_DIR/test_client
		?Window ([0-9]+)
		[global window1=$1]
		[log re-started test client 1 $window1]

	[shell pekwm]
		?client .* constructed

	[shell test_update_client_list_report_all]
		?BEGIN WINDOWS
		?Window $window1
		?END WINDOWS

	[shell test_client-2]
		!$TEST_DIR/test_client
		?Window ([0-9]+)
		[global window2=$1]
		[log started test client 2 $window2]

	[shell pekwm]
		?client .* constructed

	[shell test_update_client_list_report_all]
		?BEGIN WINDOWS
		?Window $window1
		?Window $window2
		?END WINDOWS
		!
		?SH-PROMPT:
[endfunction]

[function test_update_client_list]
	[log test_update_client_list]

	[shell test_update_client_list]
		-Window $window1
		!$TEST_DIR/test_update_client_list
		?BEGIN WINDOWS
		?Window $window2
		?END WINDOWS
		!
		?SH-PROMPT:
[endfunction]

[function test_restack_window]
	[log test_restack_window]

	[shell xterm]
		!xterm -name term1 -geometry 80x24+0x0 +sb /bin/sh

	[shell xterm2]
		!xterm -name term2 -geometry 80x24+0x0 +sb /bin/sh

	[shell pekwm]
		?client term1 constructed
		?client term2 constructed

	[shell pekwm_ctrl]
		!$$VALGRIND $BIN_DIR/ctrl/pekwm_ctrl -a restack -c term1 -C term2 above
		?_NET_RESTACK_WINDOW ([0-9]+) ([0-9]+) OK
		[global client=$1]
		[global sibling=$2]
		[log _NET_RESTACK_WINDOW client=$client sibling=$sibling]
		?SH-PROMPT:

	[shell pekwm]
		?_NET_RESTACK_WINDOW client=$client sibling=$sibling detail=0
		?updating _NET_CLIENT_LIST_STACKING with [0-9]+ window

	[shell xterm1]
		!$_CTRL_C_
		?SH-PROMPT:

	[shell xterm2]
		!$_CTRL_C_
		?SH-PROMPT:
[endfunction]

[function test_wmset_scale]
	[log test_wmset_scale]

	[shell pekwm_ctrl]
		!$$VALGRIND $BIN_DIR/ctrl/pekwm_ctrl WmSet Scale 2.0
		?SH-PROMPT:

	[shell pekwm]
		?received _PEKWM_CMD: WmSet Scale 2.0
		?start action WmSet wo 0
		?sent THEME .* to pekwm_sys
		?end action WmSet wo 0

	[shell xprop]
		[log verify _PEKWM_THEME_SCALE]
		!xprop -root _PEKWM_THEME_SCALE
		???_PEKWM_THEME_SCALE(STRING) = "2"
		?SH-PROMPT:
[endfunction]

[function test_warp_pointer]
	[shell test]
		[log test_warp_pointer]
		[call sh-eval "$BIN_DIR/ctrl/pekwm_ctrl WarpPointer 100 100"]

	[shell pekwm]
		?start action WarpPointer wo 0
		?end action WarpPointer wo 0

	[shell test]
		!$TEST_DIR/test_client query_pointer
		?root x 100 y 100
		?SH-PROMPT:
		[call sh-eval "$BIN_DIR/ctrl/pekwm_ctrl WarpPointer 300 300"]

	[shell pekwm]
		?start action WarpPointer wo 0
		?end action WarpPointer wo 0

	[shell test]
		!$TEST_DIR/test_client query_pointer
		?root x 300 y 300
		?SH-PROMPT:
[endfunction]

[function test_cfg_deny_resize_inc]
	[log test_cfg_deny_resize_inc]

	[shell xterm]
		!xterm -name no-resize-inc +sb /bin/sh

	[shell pekwm]
		?client .* constructed

	[shell pekwm_ctrl]
		-(no client match|Invalid read of size)
		!$$VALGRIND $BIN_DIR/ctrl/pekwm_ctrl -c no-resize-inc Set Maximized
		?_PEKWM_CMD ([0-9]+) Set Maximized OK
		[global window=$1]
		?SH-PROMPT:

	[shell xprop]
		[log verify size of term]
		!xwininfo -id $window
		?Width: 1024
		?Height: 768
		?SH-PROMPT:

	[shell xterm]
		!$_CTRL_C_
		?SH-PROMPT:
[endfunction]

[function test_net_request_frame_extents]
	[shell test_net_request_frame_extents]
		-ERROR
		[log test_net_request_frame_extents]
		!$TEST_DIR/test_net_request_frame_extents
		?PROGRESS: send _NET_REQUEST_FRAME_EXTENTS
		?PROGRESS: wait for PropertyNotify
		?PROGRESS: read _NET_FRAME_EXTENTS
		?PROGRESS: type_ret 6 format_ret 32 items_ret 4 after_ret 0
		?OK: extents left [1-9][0-9]* right [1-9][0-9]* top [1-9][0-9]* bottom [1-9][0-9]*
		?SH-PROMPT:
		!$TEST_DIR/test_net_request_frame_extents on off
		?PROGRESS: send _NET_REQUEST_FRAME_EXTENTS
		?PROGRESS: wait for PropertyNotify
		?PROGRESS: read _NET_FRAME_EXTENTS
		?PROGRESS: type_ret 6 format_ret 32 items_ret 4 after_ret 0
		?OK: extents left 0 right 0 top [1-9][0-9]* bottom 0
		?SH-PROMPT:
		!$TEST_DIR/test_net_request_frame_extents off on
		?PROGRESS: send _NET_REQUEST_FRAME_EXTENTS
		?PROGRESS: wait for PropertyNotify
		?PROGRESS: read _NET_FRAME_EXTENTS
		?PROGRESS: type_ret 6 format_ret 32 items_ret 4 after_ret 0
		?OK: extents left [1-9][0-9]* right [1-9][0-9]* top [1-9][0-9]* bottom [1-9][0-9]*
		?SH-PROMPT:
		!$TEST_DIR/test_net_request_frame_extents off off
		?PROGRESS: send _NET_REQUEST_FRAME_EXTENTS
		?PROGRESS: wait for PropertyNotify
		?PROGRESS: read _NET_FRAME_EXTENTS
		?PROGRESS: type_ret 6 format_ret 32 items_ret 4 after_ret 0
		?OK: extents left 0 right 0 top 0 bottom 0
		?SH-PROMPT:
[endfunction]

[function test_transient_for]
	[shell test_transient_for]
		-ERROR
		[log test_transient_for (normal)]
		!$TEST_DIR/test_transient_for
		?transient [0-9]+ set to [0-9]+

	[shell pekwm]
		?client .* constructed
		?transient for changed from (0x)?0 to (0x[0-9a-f]+)
		[global client=$2]
		?client .* constructed

	[shell test_transient_for]
		!
		?PROGRESS: destroy transient window 1

	[shell pekwm]
		[log waiting for _transient_for $client to be set to 0]
		?transient for changed from $client to (0x)?0
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: destroy main window

	[shell pekwm]
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: done
		?SH-PROMPT:

	[shell test_transient_for]
		[log test_transient_for (transient on self)]
		!$TEST_DIR/test_transient_for transient-on-self
		?transient [0-9]+ set to self

	[shell pekwm]
		[log verify pekwm error message]
		?client .* constructed
		?client set transient hint for itself

	[shell test_transient_for]
		!
		?PROGRESS: destroy transient window 1
		!
		?PROGRESS: destroy main window
		!
		?PROGRESS: done
		?SH-PROMPT:

		[log test_transient_for (destroy main before transient)]
		!$TEST_DIR/test_transient_for destroy-main-first
		?transient [0-9]+ set to [0-9]+

	[shell pekwm]
		?client .* constructed
		?transient for changed from (0x)?0 to (0x[0-9a-f]+)
		[global client=$2]

	[shell test_transient_for]
		!
		?PROGRESS: destroy main window

	[shell pekwm]
		[log waiting for _transient_for $client to be set to 0]
		?transient for changed from $client to (0x)?0
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: destroy transient window 1

	[shell pekwm]
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: done
		?SH-PROMPT:

		[log test_transient_for (loop)]
		!$TEST_DIR/test_transient_for transient-loop
		?transient [0-9]+ set to [0-9]+

	[shell pekwm]
		?transient for changed from (0x)?0 to (0x[0-9a-f]+)
		[global client1=$2]
		?client .* constructed

	[shell test_transient_for]
		!
		?transient [0-9]+ set to [0-9]+
		?transient [0-9]+ set to [0-9]+

	[shell pekwm]
		?transient for changed from (0x)?0 to (0x[0-9a-f]+)
		[global client2=$2]
		?transient for changed from (0x)?0 to (0x[0-9a-f]+)
		[global client3=$2]

	[shell test_transient_for]
		!
		?PROGRESS: destroy transient window 1

	[shell pekwm]
		?transient for changed from .* to (0x)?0
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: destroy transient window 2

	[shell pekwm]
		?transient for changed from .* to (0x)?0
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: destroy main window

	[shell pekwm]
		?client for window .* destructed

	[shell test_transient_for]
		!
		?PROGRESS: done
		?SH-PROMPT:
[endfunction]

[function test_icon_property]
	[log test_icon_property]

	[shell xterm]
		!xterm -name icon +sb /bin/sh

	[shell pekwm]
		?set _NET_WM_ICON on
		?client .* constructed for window (0x[0-9a-f]+)
		[global window=$1]

	[shell xprop]
		[log verify _NET_WM_ICON is set]
		-not found
		!xprop -id $window _NET_WM_ICON
		?_NET_WM_ICON.*32 x 32
		?SH-PROMPT:
		-

	[shell xterm]
		!$_CTRL_C_
		?SH-PROMPT:
[endfunction]

[function test_client_frame_geometry_property]
	[log test_client_frame_geometry_property]

	[shell xterm]
		!xterm -name client-geometry +sb /bin/sh

	[shell pekwm]
		???applied ClientGeometry property Geometry x:10 y: 10 width: 100 height: 100 -> Geometry x:914 y: 658 width: 100 height: 100
		?client .* constructed for window (0x[0-9a-f]+)
		[global window=$1]

	[shell xprop]
		[log verify Client geometry]
		-not found
		!xwininfo -id $window
		?Width: 100
		?Height: 100
		?-geometry .*-10-10
		?SH-PROMPT:
		-

	[shell xterm]
		!$_CTRL_C_
		?SH-PROMPT:

	[shell xterm]
		!xterm -name frame-geometry +sb /bin/sh

	[shell pekwm]
		???applied FrameGeometry property Geometry x:10 y: 10 width: 100 height: 100 -> Geometry x:10 y: 10 width: 100 height: 100
		?client .* constructed for window (0x[0-9a-f]+)
		[global window=$1]

	[shell xprop]
		[log verify Frame geometry]
		# height should be less than 100 due to titlebar
		-(not found|Height: 100)
		!xwininfo -id $window
		?Width: 100
		# not checking height due to variable title height
		?-geometry .*\+10\+10
		?SH-PROMPT:
		-

	[shell xterm]
		!$_CTRL_C_
		?SH-PROMPT:

[endfunction]

[function test_net_wm_pid]
	[shell xprop]
		[log get _NET_WM_PID]
		!xprop -root _NET_WM_PID
		?_NET_WM_PID.* = (.*)
		[global net_wm_pid=$1]
		?SH-PROMPT:

	[shell test]
		# should be pekwm and not pekwm_wm
		-pekwm_wm
		!ps $net_wm_pid
		[call sh-ok]
		-
[endfunction]

[shell Xvfb]
	[call start-xvfb]

[shell pekwm]
	-Invalid read of size
	[log starting pekwm (pekwm.config.report_all)]
	!$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --config pekwm.config.report_all --log-level trace
	?Enter event loop.

[shell test]
	[call test_client_frame_geometry_property]
	[call test_icon_property]
	[call test_transient_for]
	[call test_net_wm_pid]
	[call test_cfg_deny_resize_inc]
	[call test_warp_pointer]
	[call test_net_request_frame_extents]
	[call test_update_client_list_report_all]
	[call test_restack_window]
	[call test_wmset_scale]

[shell pekwm]
	!$_CTRL_C_
	?SH-PROMPT:

	[log starting pekwm (pekwm.config)]
	!$$VALGRIND $BIN_DIR/wm/pekwm --skip-start --config pekwm.config --log-level trace
	?Enter event loop.

[shell test]
	[call test_update_client_list]

[shell pekwm]
	!$_CTRL_C_
	?SH-PROMPT:
	[call test_config_path]
	[call test_log_file_output]
	[call test_x11_var_expansion]

[shell test]
	[call test_pekwm_replace]

[shell Xvfb]
	[call stop-xvfb]
